{"data":{"markdownRemark":{"html":"<p>First, we need to know the full process running on React.<br>\nTake a simple counter, primarily used to see the process on React executing internal methods.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://terry-su.github.io/CDN/images/how-react-works/setState-and-on-click_mini.png\">\n<em><a href=\"https://terry-su.github.io/CDN/images/how-react-works/setState-and-on-click.png\">Click here to view the original image</a></em></p>\n<p>Above is a flowchart of the React internal methods running through the tools, based on the performance chart data from the Chrome developer tools.<br>\nIt should be obvious here that there are a lot of internal React methods. Take all methods out one by one, show not quite reasonable also do not need. But we can go through the process and find that the main processes are:</p>\n<ol>\n<li><code class=\"language-text\">ReactDOM</code> Render a DOM node</li>\n<li>Schedule work for all units</li>\n<li>Unit after unit of execution</li>\n<li>Submit - updates the browser DOM</li>\n</ol>\n<p>It is worth mentioning that perform <code class=\"language-text\">setState</code> method, after the React will perform a starting step 2ã€‚</p>\n<h2><code class=\"language-text\">ReactDOM</code> Render a DOM node</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> docuemnt<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Schedule work for all units</h2>\n<p>This step is arguably the most arcane part of the source code.</p>\n<h2>Unit after unit of execution</h2>\n<ol>\n<li>If there is an uninitialized class component, initialize it.</li>\n<li>Use Diff algorithm to label components with functions (add, modify, delete, etc.)</li>\n</ol>\n<h2>Submit - updates the browser DOM</h2>\n<p>Update the DOM by submitting all functional tags (performing the corresponding functions).</p>","headings":[{"value":"<code class=\"language-text\">ReactDOM</code> Render a DOM node","depth":2},{"value":"Schedule work for all units","depth":2},{"value":"Unit after unit of execution","depth":2},{"value":"Submit - updates the browser DOM","depth":2}],"fields":{"slug":"/get-started/whole-flow/en/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/get-started/whole-flow/en/","rootPath":"/","locale":"en","decoratedLocale":"en","texts":{"siteTitle":"How React Works","getStarted":"Get Started","metaDesc":"how react works understand react under the hood react mechanism react source codes ","home":{"introduction":"Get to Know How React Works Under the Hood"}},"pathname":"/whole-flow","categories":[{"label":"Flow","href":"/whole-flow"},{"label":"Fiber","href":"/fiber"},{"label":"The module","foldable":true,"folded":false,"items":[{"label":"JSX","href":"/jsx"},{"label":"Why setState is asynchronous","href":"/why-setstate-is-async"},{"label":"How React event system works","href":"/how-react-event-system-works"}]}]}}