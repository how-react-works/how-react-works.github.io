{"data":{"markdownRemark":{"html":"<p>Fiber, specifically the Fiber algorithm, is at the core of the React algorithm, which is both</p>\n<ul>\n<li>An abstract object with a React element   </li>\n</ul>\n<p>Is also</p>\n<ul>\n<li>One unit of work   </li>\n</ul>\n<p>Because of Fiber's granularity, it make React be able to:</p>\n<ul>\n<li>Pause, reuse, or even give up some work</li>\n<li>Assign priorities to different types of work</li>\n</ul>\n<p>In a nutshell, Fiber is what enables React to organize work on its own, boosting the browser's ability to render the user interface.</p>\n<h2>The field of the Fiber object</h2>\n<p>Example:</p>\n<ul>\n<li>stateNode: classAn instance of a component or function component</li>\n<li>tag: <a href=\"https://github.com/facebook/react/blob/master/packages/shared/ReactWorkTags.js\">Work label</a></li>\n<li>type：classComponent or function component</li>\n<li>elementType</li>\n<li>key: A unique flag in a list</li>\n</ul>\n<p>Self characteristics:</p>\n<ul>\n<li>return： Father Fiber</li>\n<li>child: The child Fiber</li>\n<li>sibling: Adjacent Fiber</li>\n<li>index</li>\n</ul>\n<p>Status and properties:</p>\n<ul>\n<li>pendingProps：Properties to be used </li>\n<li>memoizedProps: Reusable properties</li>\n<li>updateQueue: To update the status, execute the callback function</li>\n<li>memoizedState: State of reusable class components</li>\n<li>contextDependencies</li>\n<li>~ ~</li>\n<li>mode</li>\n</ul>\n<p>Side effects (label)：</p>\n<ul>\n<li>effectTag</li>\n<li>nextEffect</li>\n<li>~ ~</li>\n<li>firstEffect</li>\n<li>lastEffect</li>\n<li>~ ~</li>\n<li>expirationTime</li>\n<li>childExpirationTime</li>\n<li>~ ~</li>\n<li>alternate</li>\n<li>~ ~</li>\n<li>ref</li>\n<li>~ ~</li>\n</ul>\n<blockquote>\n<p>Here, Side effects are actions like manually changing the DOM and requesting remote data that should not be performed during the React render process.</p>\n</blockquote>\n<p>Based on Fiber, we can say that the React process is primarily two-step:</p>\n<ol>\n<li>Render</li>\n<li>Submit</li>\n</ol>\n<h2>Render</h2>\n<p>Two entrances:</p>\n<ol>\n<li><code class=\"language-text\">ReactDOM.render(...)</code></li>\n<li><code class=\"language-text\">setState(...)</code></li>\n</ol>\n<p>During the rendering process, the work loop is executed, somewhat like the event loop. A work cycle completes multiple units of work.</p>\n<p>Related source code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isYieldy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Flush work without yielding</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Flush asynchronous work until there's a higher priority event</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">shouldYieldToRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Submit</h2>\n<p>Update the DOM</p>\n<h2>Declares the cycle hook execution location</h2>\n<p>Render when executed:</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>Submitted:</p>\n<ul>\n<li>componentDidMount</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>","headings":[{"value":"The field of the Fiber object","depth":2},{"value":"Render","depth":2},{"value":"Submit","depth":2},{"value":"Declares the cycle hook execution location","depth":2}],"fields":{"slug":"/get-started/fiber/en/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/get-started/fiber/en/","rootPath":"/","locale":"en","decoratedLocale":"en","texts":{"siteTitle":"How React Works","getStarted":"Get Started","home":{"introduction":"Get to Know How React Works Under the Hood"}},"pathname":"/fiber","categories":[{"label":"Flow","href":"/whole-flow"},{"label":"Fiber","href":"/fiber"},{"label":"The module","foldable":true,"folded":false,"items":[{"label":"JSX","href":"/jsx"},{"label":"Why setState is asynchronous","href":"/why-setstate-is-async"},{"label":"How React event system works","href":"/how-react-event-system-works"}]}]}}