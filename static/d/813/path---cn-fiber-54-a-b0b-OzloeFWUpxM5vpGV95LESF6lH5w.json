{"data":{"markdownRemark":{"html":"<p>Fiber，准确说是Fiber算法，也是React的核心算法，它既是</p>\n<ul>\n<li>一个带有React元素的<strong>抽象对象</strong>   </li>\n</ul>\n<p>也是</p>\n<ul>\n<li>一个单元工作   </li>\n</ul>\n<p>正因为Fiber的颗粒性，它使React能够：</p>\n<ul>\n<li>暂停，重用甚至是放弃一些工作</li>\n<li>给不同类型的工作分配优先级</li>\n</ul>\n<p>简单来说，就是Fiber让React支持自己安排工作任务，从而提升浏览器渲染用户界面的性能。</p>\n<h2>Fiber对象的字段</h2>\n<p>实例：</p>\n<ul>\n<li>stateNode: class组件或函数组件的实例</li>\n<li>tag: <a href=\"https://github.com/facebook/react/blob/master/packages/shared/ReactWorkTags.js\">工作标签</a></li>\n<li>type：class组件或函数组件</li>\n<li>elementType</li>\n<li>key: 在一个列表中的唯一标志</li>\n</ul>\n<p>自身特性：</p>\n<ul>\n<li>return： 父Fiber</li>\n<li>child: 子Fiber</li>\n<li>sibling: 相邻Fiber</li>\n<li>index</li>\n</ul>\n<p>状态和属性：</p>\n<ul>\n<li>pendingProps：即将用到的属性 </li>\n<li>memoizedProps: 可重用的属性</li>\n<li>updateQueue: 用于更新状态，执行回调函数</li>\n<li>memoizedState: 可重用的class组件的状态</li>\n<li>contextDependencies</li>\n<li>~ ~</li>\n<li>mode</li>\n</ul>\n<p>副作用（标签）：</p>\n<ul>\n<li>effectTag</li>\n<li>nextEffect</li>\n<li>~ ~</li>\n<li>firstEffect</li>\n<li>lastEffect</li>\n<li>~ ~</li>\n<li>expirationTime</li>\n<li>childExpirationTime</li>\n<li>~ ~</li>\n<li>alternate</li>\n<li>~ ~</li>\n<li>ref</li>\n<li>~ ~</li>\n</ul>\n<blockquote>\n<p>在这里，副作用（Side effects）指的是一些类似手动更改DOM、请求远程数据，不应该在React渲染流程中执行的操作。</p>\n</blockquote>\n<p>基于Fiber，我们可以说React的流程主要只有两个步骤：</p>\n<ol>\n<li>渲染</li>\n<li>提交</li>\n</ol>\n<h2>渲染</h2>\n<p>两个入口:</p>\n<ol>\n<li><code class=\"language-text\">ReactDOM.render(...)</code></li>\n<li><code class=\"language-text\">setState(...)</code></li>\n</ol>\n<p>在渲染流程中，会执行工作循环（work loop），有点类似事件循环（event loop）。一次工作循环会完成多个单元工作。<br>\n相关源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isYieldy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Flush work without yielding</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Flush asynchronous work until there's a higher priority event</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">shouldYieldToRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>提交</h2>\n<p>更新DOM</p>\n<h2>声明周期钩子执行位置</h2>\n<p>渲染时执行：</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>提交时：</p>\n<ul>\n<li>componentDidMount</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>","headings":[{"value":"Fiber对象的字段","depth":2},{"value":"渲染","depth":2},{"value":"提交","depth":2},{"value":"声明周期钩子执行位置","depth":2}],"fields":{"slug":"/get-started/fiber/cn/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/get-started/fiber/cn/","rootPath":"/cn/","locale":"zh_CN","decoratedLocale":"cn","texts":{"siteTitle":"React工作原理","getStarted":"开始使用","metaDesc":"React原理 React工作原理 如何实现React React源码","home":{"introduction":"了解React在底层如何运转"}},"pathname":"/cn/fiber","categories":[{"label":"整体流程","href":"/cn/whole-flow"},{"label":"Fiber","href":"/cn/fiber"},{"label":"模块","foldable":true,"folded":false,"items":[{"label":"JSX","href":"/cn/jsx"},{"label":"为什么setState是异步的","href":"/cn/why-setstate-is-async"},{"label":"React事件系统是如何运作的","href":"/cn/how-react-event-system-works"}]}]}}