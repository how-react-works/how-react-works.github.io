{"data":{"markdownRemark":{"html":"<p>首先，我们需要知道React运行的一个完整流程。<br>\n以一个简单的计数器为例，主要用来看React执行内部方法的流程。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://terry-su.github.io/CDN/images/how-react-works/setState-and-on-click_mini.png\">\n<em><a href=\"https://terry-su.github.io/CDN/images/how-react-works/setState-and-on-click.png\">点击此处查看原图</a></em></p>\n<p>上方为通过工具,基于Chrome浏览器开发者工具中的性能图表数据，生成的React内部方法运行的流程图。<br>\n从中可以明显看出，React内部方法非常多。把所有方法都拎出来一个个讲，显示不太合理也没有必要。 但我们可以顺着流程走一遍，会发现它的主要几个大流程是：</p>\n<ol>\n<li><code class=\"language-text\">ReactDOM</code> 渲染一个DOM节点</li>\n<li>调度所有单元工作</li>\n<li>一个接一个执行单元工作</li>\n<li>提交-更新浏览器DOM</li>\n</ol>\n<p>值得一提的是，执行<code class=\"language-text\">setState</code>方法后，React又会从步骤2开始执行一次。</p>\n<h2><code class=\"language-text\">ReactDOM</code> 渲染一个DOM节点</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> docuemnt<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<h2>调度所有单元工作</h2>\n<p>这一步骤可以说是源码中最晦涩难懂的一部分。</p>\n<h2>一个接一个执行单元工作</h2>\n<ol>\n<li>如果有未初始化的class组件，将其初始化。</li>\n<li>运用Diff算法，给组件打功能标签（新增、修改，删除等）</li>\n</ol>\n<h2>提交-更新浏览器DOM</h2>\n<p>提交所有功能标签（执行相应功能），从而更新DOM。</p>","headings":[{"value":"<code class=\"language-text\">ReactDOM</code> 渲染一个DOM节点","depth":2},{"value":"调度所有单元工作","depth":2},{"value":"一个接一个执行单元工作","depth":2},{"value":"提交-更新浏览器DOM","depth":2}],"fields":{"slug":"/get-started/whole-flow/cn/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/get-started/whole-flow/cn/","rootPath":"/cn/","locale":"zh_CN","decoratedLocale":"cn","texts":{"siteTitle":"React工作原理","getStarted":"开始使用","home":{"introduction":"了解React在底层如何运转"}},"pathname":"/cn/whole-flow","categories":[{"label":"整体流程","href":"/cn/whole-flow"},{"label":"Fiber","href":"/cn/fiber"},{"label":"模块","foldable":true,"folded":false,"items":[{"label":"JSX","href":"/cn/jsx"},{"label":"为什么setState是异步的","href":"/cn/why-setstate-is-async"},{"label":"React事件系统是如何运作的","href":"/cn/how-react-event-system-works"}]}]}}